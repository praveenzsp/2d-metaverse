generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id       String  @id @unique @default(cuid())
  username String  @unique
  email    String  @unique
  password String
  avatarId String?  
  role     Role    
  spaces   UserSpace[] 
  avatar   Avatar? @relation(fields: [avatarId], references: [id])  
  chatMessages ChatMessage[]
  createdSpaces Space[]
}


model Space {
  id        String  @id @unique @default(cuid())
  name      String
  width     Int
  height    Int?
  thumbnail String?  
  creatorId   String
  creator     User    @relation(fields: [creatorId], references: [id])  
  elements spaceElements[] 
  chatMessages ChatMessage[]
  users UserSpace[]
}


model UserSpace {
  id        String   @id @unique @default(cuid())
  userId    String
  spaceId   String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([userId, spaceId])
}


model spaceElements {
  id        String @id @unique @default(cuid())
  elementId String
  spaceId   String
  x         Int    
  y         Int    
  space     Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  element   Element @relation(fields: [elementId], references: [id])
}


model Element {
  id       String @id @unique @default(cuid())
  name     String
  width    Int
  height   Int
  static   Boolean
  imageUrl String
  spaces spaceElements[] 
  mapElements MapElements[] 
}


model Map {
  id     String  @id @unique @default(cuid())
  width  Int
  height Int
  name   String
  thumbnail String
  mapElements MapElements[] 
}


model MapElements {
  id        String  @id @unique @default(cuid())
  mapId     String
  elementId String
  x         Int?    
  y         Int?    
  map       Map     @relation(fields: [mapId], references: [id], onDelete: Cascade)
  element   Element @relation(fields: [elementId], references: [id])
}


model Avatar {
  id       String  @id @unique @default(cuid())
  imageUrl String? 
  name     String? 
  users    User[] 
}

model ChatMessage {
  id        String   @id @unique @default(cuid())
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  spaceId   String
  space     Space    @relation(fields: [spaceId], references: [id])
  createdAt DateTime @default(now())
}

enum Role {
  Admin
  User
}